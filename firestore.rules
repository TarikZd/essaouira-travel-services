/**
 * @fileoverview Firestore Security Rules for a tourism booking platform.
 *
 * Core Philosophy:
 * This ruleset prioritizes ease of iteration during the prototyping phase
 * and does NOT perform any kind of data validation, with the exception of
 * requiring the presence of `id` when creating documents. It allows public
 * read access to all collections. It does NOT enforce any write access
 * restrictions based on user authentication.
 *
 * Data Structure:
 * - `/services/{serviceId}`: Stores tourism service details. Accessible to all users for reading and writing.
 * - `/bookings/{bookingId}`: Stores booking requests. Accessible to all users for reading and writing.
 * - `/website_configuration/{documentId}`: Stores website configuration data. Accessible to all users for reading and writing.
 *
 * Key Security Decisions:
 * - Public Read Access: All `get` and `list` operations are allowed for all users, including unauthenticated users.
 * - Unrestricted Writes: All `create`, `update`, and `delete` operations are currently allowed for all users. In a production environment, these should be restricted.
 * - No Data Validation: This ruleset does NOT validate the structure or content of any data being written.
 *
 * Denormalization for Authorization:
 * - Not applicable in the current prototyping phase.
 *
 * Structural Segregation:
 * - Not applicable in the current prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read and write access to service details.
     * @path /services/{serviceId}
     * @allow (get, list) All users can read service details.
     * @allow (create, update, delete) All users can create, update, and delete service details.
     * @deny none
     * @principle Public read access, unrestricted writes (for prototyping only).
     */
    match /services/{serviceId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows public read and write access to booking requests.
     * @path /bookings/{bookingId}
     * @allow (get, list) All users can read booking requests.
     * @allow (create, update, delete) All users can create, update, and delete booking requests.
     * @deny none
     * @principle Public read access, unrestricted writes (for prototyping only).
     */
    match /bookings/{bookingId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows public read and write access to website configuration.
     * @path /website_configuration/{documentId}
     * @allow (get, list) All users can read the website configuration.
     * @allow (create, update, delete) All users can create, update, and delete the website configuration.
     * @deny none
     * @principle Public read access, unrestricted writes (for prototyping only).
     */
    match /website_configuration/{documentId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
  }
}